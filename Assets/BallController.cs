//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/BallController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @BallController : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @BallController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""BallController"",
    ""maps"": [
        {
            ""name"": ""BallMove"",
            ""id"": ""309ca6cc-8471-4028-8fa4-e5e7912bde4f"",
            ""actions"": [
                {
                    ""name"": ""GetInput"",
                    ""type"": ""Value"",
                    ""id"": ""91e5776c-b066-40d8-afed-1bab8950bef3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Clicked"",
                    ""type"": ""Button"",
                    ""id"": ""824dbd6b-4684-4334-abe6-5ebd93803e5b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6cda9c93-1d06-4ffa-b00a-f8b6786611e4"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""BallControl"",
                    ""action"": ""GetInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""27b48239-a7f3-4bdb-8f36-2685b274fcb7"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GetInput"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4f01a973-d28a-4880-86af-0d2022f70dcc"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""BallControl"",
                    ""action"": ""GetInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4649edde-5028-4301-a05b-aef85b82af04"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""BallControl"",
                    ""action"": ""GetInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c5ea6dbc-8635-480e-a51b-99bc7dedd1ae"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""BallControl"",
                    ""action"": ""GetInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""eaa1e93d-e6a2-4e24-987e-3932f1dbfb34"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""BallControl"",
                    ""action"": ""GetInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b53a4255-79bc-4248-a9ed-d0ce947d3ef5"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Clicked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ee66a72a-3fdb-47bc-9dc3-9ade37db2cf2"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Clicked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Controller"",
            ""bindingGroup"": ""Controller"",
            ""devices"": []
        },
        {
            ""name"": ""BallControl"",
            ""bindingGroup"": ""BallControl"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // BallMove
        m_BallMove = asset.FindActionMap("BallMove", throwIfNotFound: true);
        m_BallMove_GetInput = m_BallMove.FindAction("GetInput", throwIfNotFound: true);
        m_BallMove_Clicked = m_BallMove.FindAction("Clicked", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BallMove
    private readonly InputActionMap m_BallMove;
    private IBallMoveActions m_BallMoveActionsCallbackInterface;
    private readonly InputAction m_BallMove_GetInput;
    private readonly InputAction m_BallMove_Clicked;
    public struct BallMoveActions
    {
        private @BallController m_Wrapper;
        public BallMoveActions(@BallController wrapper) { m_Wrapper = wrapper; }
        public InputAction @GetInput => m_Wrapper.m_BallMove_GetInput;
        public InputAction @Clicked => m_Wrapper.m_BallMove_Clicked;
        public InputActionMap Get() { return m_Wrapper.m_BallMove; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BallMoveActions set) { return set.Get(); }
        public void SetCallbacks(IBallMoveActions instance)
        {
            if (m_Wrapper.m_BallMoveActionsCallbackInterface != null)
            {
                @GetInput.started -= m_Wrapper.m_BallMoveActionsCallbackInterface.OnGetInput;
                @GetInput.performed -= m_Wrapper.m_BallMoveActionsCallbackInterface.OnGetInput;
                @GetInput.canceled -= m_Wrapper.m_BallMoveActionsCallbackInterface.OnGetInput;
                @Clicked.started -= m_Wrapper.m_BallMoveActionsCallbackInterface.OnClicked;
                @Clicked.performed -= m_Wrapper.m_BallMoveActionsCallbackInterface.OnClicked;
                @Clicked.canceled -= m_Wrapper.m_BallMoveActionsCallbackInterface.OnClicked;
            }
            m_Wrapper.m_BallMoveActionsCallbackInterface = instance;
            if (instance != null)
            {
                @GetInput.started += instance.OnGetInput;
                @GetInput.performed += instance.OnGetInput;
                @GetInput.canceled += instance.OnGetInput;
                @Clicked.started += instance.OnClicked;
                @Clicked.performed += instance.OnClicked;
                @Clicked.canceled += instance.OnClicked;
            }
        }
    }
    public BallMoveActions @BallMove => new BallMoveActions(this);
    private int m_ControllerSchemeIndex = -1;
    public InputControlScheme ControllerScheme
    {
        get
        {
            if (m_ControllerSchemeIndex == -1) m_ControllerSchemeIndex = asset.FindControlSchemeIndex("Controller");
            return asset.controlSchemes[m_ControllerSchemeIndex];
        }
    }
    private int m_BallControlSchemeIndex = -1;
    public InputControlScheme BallControlScheme
    {
        get
        {
            if (m_BallControlSchemeIndex == -1) m_BallControlSchemeIndex = asset.FindControlSchemeIndex("BallControl");
            return asset.controlSchemes[m_BallControlSchemeIndex];
        }
    }
    public interface IBallMoveActions
    {
        void OnGetInput(InputAction.CallbackContext context);
        void OnClicked(InputAction.CallbackContext context);
    }
}
